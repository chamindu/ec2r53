# Based on the "trust" template v0.1.1
# https://github.com/japaric/trust/tree/v0.1.1

dist: trusty
language: rust
services: docker
sudo: required

# TODO Rust builds on stable by default, this can be
# overridden on a case by case basis down below.

env:
  global:
    # TODO Update this to match the name of your project.
    - CRATE_NAME=ec2r53

matrix:
  # TODO These are all the build jobs. Adjust as necessary. Comment out what you
  # don't need
  include:
    # Linux
    - env: TARGET=i686-unknown-linux-gnu
    - env: TARGET=i686-unknown-linux-musl
    - env: TARGET=x86_64-unknown-linux-gnu
    - env: TARGET=x86_64-unknown-linux-musl

    # OSX
    #- env: TARGET=i686-apple-darwin
    #  os: osx
    #- env: TARGET=x86_64-apple-darwin
    #  os: osx

    # *BSD
    - env: TARGET=i686-unknown-freebsd DISABLE_TESTS=1
    - env: TARGET=x86_64-unknown-freebsd DISABLE_TESTS=1
    - env: TARGET=x86_64-unknown-netbsd DISABLE_TESTS=1

    # Other architectures
    - env: TARGET=aarch64-unknown-linux-gnu
    #- env: TARGET=armv7-unknown-linux-gnueabihf
    #- env: TARGET=mips-unknown-linux-gnu
    #- env: TARGET=mips64-unknown-linux-gnuabi64
    #- env: TARGET=mips64el-unknown-linux-gnuabi64
    #- env: TARGET=mipsel-unknown-linux-gnu
    #- env: TARGET=powerpc-unknown-linux-gnu
    #- env: TARGET=powerpc64-unknown-linux-gnu
    #- env: TARGET=powerpc64le-unknown-linux-gnu
    #- env: TARGET=s390x-unknown-linux-gnu DISABLE_TESTS=1

    # Testing other channels
    - env: TARGET=x86_64-unknown-linux-gnu
      rust: nightly
    #- env: TARGET=x86_64-apple-darwin
      #os: osx
      #rust: nightly

before_install: set -e

install:
  - sh ci/install.sh
  - source ~/.cargo/env || true

script:
  - bash ci/script.sh

after_script: set +e

before_deploy:
  - sh ci/before_deploy.sh

deploy:
  api_key:
    secure: "DufxPlTEZhwjR45l4Gs8eXiaujVqB6LcrpscJHUduDPIppmcusMIhwSt+8TEux4VveiWYtb6faiGDJIMnSjOPfBieAC667/NJwjXf4ConMWdh00y7xW8ZGp7HiD5LeuCljMdksaEDI9bbmS+iaLr4+BNB5IWQ1kfIZoAx0o9iqyOJWeocWTazuwnyJD0BaBYqanLqdtdbBN+Uh8KDUr5AU3eixCkfHtKcCoTqIRTYPfh4SdejdcEr6/kmWEEbKU6F4/YXnLk4gzD0EjAMKgX3N+SoKFfNul7uVmMrrmh4joF8JcREHUDZ+ECoZPWmxjYuXEdgy/xCu5QqVV/QNg4oAf/Zg1PeKLXEtT7JMYHCopGHHombMB1WzHEPY7iCaF3GBRbNRUAEOFgqNglNrnKGX8ijEQbxtkuX6IiWw3f1AHIrP8KXsRlwKOfBwjsEogpu7RbK6nBafGE9lyQtqd0GL9DMxOkzWUifD2TMkOWVcLH9MVgdBHnQMFpbmbw0exEy4NtEQmjljfMhbT56farlkfNs89o50YYd7iLTYL770DAZ2D1I6I8kuWoj+NDs+whbcewEHd2Pv5OGWzGDbDpN3B1bDSaru7LRml7iuRX0LejtfliEl7/UjM2JC88hDgJ9iV7f1w58TAIjlX1K1mXqdqYa5GzI80B4F63zqw8QxQ=" 
  file_glob: true
  file: $CRATE_NAME-$TRAVIS_TAG-$TARGET.*
  on:
    # TODO Here you can pick which targets will generate binary releases
    # In this example, there are some targets that are tested using the stable
    # and nightly channels. This condition makes sure there is only one release
    # for such targets and that's generated using the stable channel
    condition: $TRAVIS_RUST_VERSION = stable
    tags: true
  provider: releases
  skip_cleanup: true

cache: cargo
before_cache:
  # Travis can't cache files that are not readable by "others"
  - chmod -R a+r $HOME/.cargo

branches:
  only:
    # release tags
    - /^v\d+\.\d+\.\d+.*$/
    - master

notifications:
  email:
    on_success: never
